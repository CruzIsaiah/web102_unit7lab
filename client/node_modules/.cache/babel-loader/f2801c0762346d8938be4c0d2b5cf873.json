{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\howdi\\\\OneDrive\\\\Desktop\\\\scho0l2023\\\\github\\\\web102_unit7lab\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card'; // Assuming Card component is defined\n\nimport { supabase } from '../client'; // Importing supabase client\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]); // State variable to store posts\n\n  useEffect(() => {\n    // useEffect hook to fetch posts when component mounts\n    fetchPosts(); // Fetch posts when component mounts\n  }, []); // Run effect only once when component mounts\n\n  const fetchPosts = async () => {\n    // Asynchronous function to fetch posts from Supabase\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('Posts').select(); // Fetch all posts from 'Posts' table\n\n      if (error) {\n        throw error; // Throw error if there's any issue fetching posts\n      }\n\n      setPosts(data); // Update state with fetched posts\n    } catch (error) {\n      console.error('Error fetching posts:', error.message); // Log error message to console\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: posts && posts.length > 0 ? // Check if posts exist and are not empty\n    posts.map((post, index) =>\n    /*#__PURE__*/\n    // Map through posts array\n    _jsxDEV(Card, {\n      id: post.id,\n      title: post.title,\n      author: post.author,\n      description: post.description\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }, this) // Render Card component for each post\n    ) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: 'No Challenges Yet ðŸ˜ž'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }, this) // Render message if no posts\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","ReadPosts","posts","setPosts","fetchPosts","data","error","from","select","console","message","length","map","post","index","id","title","author","description"],"sources":["C:/Users/howdi/OneDrive/Desktop/scho0l2023/github/web102_unit7lab/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../components/Card'; // Assuming Card component is defined\nimport { supabase } from '../client'; // Importing supabase client\n\nconst ReadPosts = () => {\n    const [posts, setPosts] = useState([]); // State variable to store posts\n\n    useEffect(() => { // useEffect hook to fetch posts when component mounts\n        fetchPosts(); // Fetch posts when component mounts\n    }, []); // Run effect only once when component mounts\n\n    const fetchPosts = async () => { // Asynchronous function to fetch posts from Supabase\n        try {\n            const { data, error } = await supabase.from('Posts').select(); // Fetch all posts from 'Posts' table\n            if (error) {\n                throw error; // Throw error if there's any issue fetching posts\n            }\n            setPosts(data); // Update state with fetched posts\n        } catch (error) {\n            console.error('Error fetching posts:', error.message); // Log error message to console\n        }\n    };\n\n    return (\n        <div className=\"ReadPosts\">\n            {\n                posts && posts.length > 0 ? // Check if posts exist and are not empty\n                posts.map((post, index) => // Map through posts array\n                    <Card key={index} id={post.id} title={post.title} author={post.author} description={post.description} /> // Render Card component for each post\n                ) : <h2>{'No Challenges Yet ðŸ˜ž'}</h2> // Render message if no posts\n            }\n        </div>\n    );\n};\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CAAuC;;AACvC,SAASC,QAAT,QAAyB,WAAzB,C,CAAsC;;;;AAEtC,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CADoB,CACoB;;EAExCC,SAAS,CAAC,MAAM;IAAE;IACdM,UAAU,GADE,CACE;EACjB,CAFQ,EAEN,EAFM,CAAT,CAHoB,CAKZ;;EAER,MAAMA,UAAU,GAAG,YAAY;IAAE;IAC7B,IAAI;MACA,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkB,MAAMN,QAAQ,CAACO,IAAT,CAAc,OAAd,EAAuBC,MAAvB,EAA9B,CADA,CAC+D;;MAC/D,IAAIF,KAAJ,EAAW;QACP,MAAMA,KAAN,CADO,CACM;MAChB;;MACDH,QAAQ,CAACE,IAAD,CAAR,CALA,CAKgB;IACnB,CAND,CAME,OAAOC,KAAP,EAAc;MACZG,OAAO,CAACH,KAAR,CAAc,uBAAd,EAAuCA,KAAK,CAACI,OAA7C,EADY,CAC2C;IAC1D;EACJ,CAVD;;EAYA,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,UAEQR,KAAK,IAAIA,KAAK,CAACS,MAAN,GAAe,CAAxB,GAA4B;IAC5BT,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP;IAAA;IAAiB;IACvB,QAAC,IAAD;MAAkB,EAAE,EAAED,IAAI,CAACE,EAA3B;MAA+B,KAAK,EAAEF,IAAI,CAACG,KAA3C;MAAkD,MAAM,EAAEH,IAAI,CAACI,MAA/D;MAAuE,WAAW,EAAEJ,IAAI,CAACK;IAAzF,GAAWJ,KAAX;MAAA;MAAA;MAAA;IAAA,QADJ,CAC6G;IAD7G,CADA,gBAGI;MAAA,UAAK;IAAL;MAAA;MAAA;MAAA;IAAA,QALZ,CAK8C;;EAL9C;IAAA;IAAA;IAAA;EAAA,QADJ;AAUH,CA7BD;;GAAMb,S;;KAAAA,S;AA+BN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}